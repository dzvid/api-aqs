1. Start yarn project: 
  yarn init

2. Install mqtt: 
  yarn add mqtt

3. Install express:
  yarn add express

4. Install postgree RBDMS on the computer:
  sudo apt-get update
  sudo apt-get install postgresql postgresql-contrib

  4.1 Create database: AirQualitySystem
  4.2 Connect to it

5. Configure how to manage/acess the database

  5.1Install postgree npm pakage (Non-blocking PostgreSQL client for Node.js): 
    yarn add pg

    OR (I CHOOSE THAT)

  5.2 Use a ORM
    5.2.1 Install sequelize, sequelize-cli (development dependencie):
      yarn add sequelize
      yarn add sequelize-cli -D
    For PostgreSQL, two libraries are needed: pg@^7.0.0 and pg-hstore.

    5.2.2 Install Body parser as as a middleware for the requests:
      yarn add body-parser

6. Sequelize configuration:
  6.1 Initialize sequelize:
    ./node_modules/.bin/sequelize init
    // or
    // npx sequelize init

7. Configure the folder structure of the project:
/----app(or api)
/------models
/--------index.js
/----config
/------database.js
/----database
/------migrations
/------seeders
/----node_modules
/----.editorconfig
/----.eslintrc
/----.gitignore
/----index.js
/----package.json
/----yarn.lock ou package.lock.json

8. Correct the path of sequelize files, create a file '.sequelizerc' on the
root directory with the following content:

const path = require('path');

module.exports = {
  'config': path.resolve('config', 'database.js'),
  'models-path': path.resolve('app', 'models'),
  'seeders-path': path.resolve('database', 'seeders'),
  'migrations-path': path.resolve('database', 'migrations'),
};

8. Now configure the models (tables represented like classes):
  8.1 Configure the file src/models/index.js: Responsible by import the other models
  of the application;
  8.2 Configure the migrations (file that keep our database versions);
    node_modules/.bin/sequelize migration:create --name=create-sensors_data
  // or
  // npx sequelize migration:create --name=sensors_data
  8.3 Edit the migration file created in step 8.2 with the settings to create your 
  table.
  8.4 After adjust your migration file, you can test if it is working:
    node_modules/.bin/sequelize db:migrate
    // or
    // npx sequelize db:migrate
  8.5 Check if it created the table in your database. It creates two tables
  SequelizeMeta and your desired table (tb_sensors_data in our case).
  The SequelizeMeta table keeps information about the migrations executed until 
  the present moment.

9. If everything is ok in step 8, then lets create our sensors_data Model.
  For this, create a file named sensorsData.js
  Then put the model content inside. 

10. Test the model. For this, add in the server.js 
an import for the src/models/index.js file:
  const { sensorsData } = require('./src/models');
  
11. Create a sensor data register:
  sensorsData.create(
    {
      id_sensor: "AIQSENSOR001",
      temperature: 35,
      humidity: 10,
      ozone: 11,
      pm25: 12,
      carbon_monoxide: 13,
      colected_at: "1999-01-08 04:05:06",
      received_at: "1998-01-08 04:05:06"
    }
  );