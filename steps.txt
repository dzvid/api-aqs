1. Inicia o projeto:
  yarn init -y
2. Cria a estrutura básica do projeto:
  src/
      app.js (Configuração do servidor express, configura as rotas e middlewares)
      routes.js (Rotas da aplicação (Parte de roteamento do express, usando o Router))
      server.js (Cria o servidor de fato(instância))

3.
  -  Cria a classe da App da aplicação no app.js
  e implementa os métodos necessários (middlewares e routes).
  - Configuramos nossas rotas no routes.js
  - Implementamos o servidor no server.js

4. Configuramos o Node para interpretar a nova sintaxe do Javascript (ES6+).
  Para isto usaremos o Sucrase. Configuramos o nodemon também.
  Ambos como dependencia de desenvolvimento:
  yarn add sucrase nodemon -D

5. Configuramos o projeto para executar com o Sucrase
(na vdd configuramos o sucrase pra transpilar nosso código):

yarn sucrase-node src/server.js

mas é melhor criarmos um script junto com o nodemon:
5.1 Criamos o script no package.json:
      "dev": "nodemon src/server.js"
5.2 Configuramos o nodemon para usar o sucrase e não o node para arquivos javascript,
criando um arquivo de configuração nodemon.json na raiz do projeto, contendo:
  {
    "execMap":{
      "js": "sucrase-node"
    }
  }

  
Instalar ESLint, Prettier e editorConfig
(Prettier fazer a formatação e o ESLint cuidar das regras,
editorConfig definir padrão de config de editor pro time de dev)
9. Configurando ferramentas para ditar o padrão de código
  9.1 Instalar o ESLint como dependencia de desenvolvimento
    yarn add eslint -D

    9.1.1 Configuramos o ESLint
      yarn eslint --init

      - Seleciona: To check syntax, find problems, and enforce code style
      - Seleciona: javascript modules (import/export)
      - Seleciona o framework: no caso não to usando nenhum no momento
      - Seleciona ambiente de execução: node
      - Seleciona style guide: Use a popular style guide -> Airbnb
      - Seleciona formato do arquivo config: Javascript
      - seleciona se quer instalar agora: Y

    9.1.2 Configura o linter para 'consertar' o código automaticamente
    quando salvar o arquivo, adicionando a linha abaixo no arquivo de configuração do
    vscode (nas preferências).

    9.1.3 Configura o .eslintrc.js para sobrescrever algumas regras do airbnb:
        rules: {
          "class-methods-use-this": "off",
          "no-param-reassign": "off",
          camelcase: "off",
          "no-unused-vars": ["error", { argsIgnorePattern: "next" }]
        }

  9.2 Instalar o Prettier:
    yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

    9.2.1 Adiciono o prettier nos 'extends' e como 'plugins' e como uma
    nova regra no .eslintrc.js:
        extends: ["airbnb-base", "prettier"],
        plugins: ["prettier"],
        rules: {
          "prettier/prettier": "error",
          "class-methods-use-this": "off",
          "no-param-reassign": "off",
          camelcase: "off",
          "no-unused-vars": ["error", { argsIgnorePattern: "next" }]
        }

    9.2.2 Crio um arquivo .prettierrc para sobrescrever regras que estão conflitando
    com as do airbnb:
        {
          "singleQuote": true,
          "trailingComma": "es5"
        }

  9.3 Pode fazer o eslint ajustar todos os arquivos Javascript do projeto de acorodo com
  o padrão definido no projeto com o comando abaixo:
    yarn eslint --fix **diretorio** --ext .js

  9.4 Instala o plugin EditorConfig no vscode (serve pra quando a equipe usa editores
  de código diferemtes, tipo Atom, sublime, etc), depois de instalar: Vai na raiz do projeto
  e gera o arquivo .editorconfig