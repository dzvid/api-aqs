CONFIGURAÇÃO DE BOILERPLATE E AMBIENTE DE DESENVOLVIMENTO 

1. Inicia o projeto:

  yarn init -y
2. Cria a estrutura básica do projeto:
  src/
      app.js (Configuração do servidor express, configura as rotas e middlewares)
      routes.js (Rotas da aplicação (Parte de roteamento do express, usando o Router))
      server.js (Cria o servidor de fato(instância))

3.
  -  Cria a classe da App da aplicação no app.js
  e implementa os métodos necessários (middlewares e routes).
  - Configuramos nossas rotas no routes.js
  - Implementamos o servidor no server.js

4. Configuramos o Node para interpretar a nova sintaxe do Javascript (ES6+).
  Para isto usaremos o Sucrase. Configuramos o nodemon também.
  Ambos como dependencia de desenvolvimento:
  yarn add sucrase nodemon -D

5. Configuramos o projeto para executar com o Sucrase
(na vdd configuramos o sucrase pra transpilar nosso código):

yarn sucrase-node src/server.js

mas é melhor criarmos um script junto com o nodemon:
5.1 Criamos o script no package.json:
      "dev": "nodemon src/server.js"
5.2 Configuramos o nodemon para usar o sucrase e não o node para arquivos javascript,
criando um arquivo de configuração nodemon.json na raiz do projeto, contendo:
  {
    "execMap":{
      "js": "sucrase-node"
    }
  }

  
Instalar ESLint, Prettier e editorConfig
(Prettier fazer a formatação e o ESLint cuidar das regras,
editorConfig definir padrão de config de editor pro time de dev)
9. Configurando ferramentas para ditar o padrão de código
  9.1 Instalar o ESLint como dependencia de desenvolvimento
    yarn add eslint -D

    9.1.1 Configuramos o ESLint
      yarn eslint --init

      - Seleciona: To check syntax, find problems, and enforce code style
      - Seleciona: javascript modules (import/export)
      - Seleciona o framework: no caso não to usando nenhum no momento
      - Seleciona ambiente de execução: node
      - Seleciona style guide: Use a popular style guide -> Airbnb
      - Seleciona formato do arquivo config: Javascript
      - seleciona se quer instalar agora: Y

    9.1.2 Configura o linter para 'consertar' o código automaticamente
    quando salvar o arquivo, adicionando a linha abaixo no arquivo de configuração do
    vscode (nas preferências).

    9.1.3 Configura o .eslintrc.js para sobrescrever algumas regras do airbnb:
        rules: {
          "class-methods-use-this": "off",
          "no-param-reassign": "off",
          camelcase: "off",
          "no-unused-vars": ["error", { argsIgnorePattern: "next" }]
        }

  9.2 Instalar o Prettier:
    yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

    9.2.1 Adiciono o prettier nos 'extends' e como 'plugins' e como uma
    nova regra no .eslintrc.js:
        extends: ["airbnb-base", "prettier"],
        plugins: ["prettier"],
        rules: {
          "prettier/prettier": "error",
          "class-methods-use-this": "off",
          "no-param-reassign": "off",
          camelcase: "off",
          "no-unused-vars": ["error", { argsIgnorePattern: "next" }]
        }

    9.2.2 Crio um arquivo .prettierrc para sobrescrever regras que estão conflitando
    com as do airbnb:
        {
          "singleQuote": true,
          "trailingComma": "es5"
        }

  9.3 Pode fazer o eslint ajustar todos os arquivos Javascript do projeto de acorodo com
  o padrão definido no projeto com o comando abaixo:
    yarn eslint --fix **diretorio** --ext .js

  9.4 Instala o plugin EditorConfig no vscode (serve pra quando a equipe usa editores
  de código diferemtes, tipo Atom, sublime, etc), depois de instalar: Vai na raiz do projeto
  e gera o arquivo .editorconfig

  ---------------------------------------
  
  INICIO DA IMPLEMENTAÇÃO DAS FEATURES

10. Configuração das Variáveis de ambiente

Variaveis ambiente podem ter seus valores configurados de acordo com o ambiente
de execução da aplicação (desenvolvimento/produção). A configuração fica no arquivo
src/.env na pasta raiz da aplicação

  10.1 Carregamos a configuração utilizando o módulo dotenv:
  yarn add dotenv

  Importamos o dotenv/config no app.js e no config/database.js, o dotenv
  carrega as variaveis de ambiente na variavel global process.env que pode ser
  utilizada para configurar a aplicação.

- Configuração do sequelize

11. Cria pasta config dentro de src.
  11.1 Dentro da pasta config, Cria o arquivo de configuração das bases de dados (contém as credencias
  para acesso à base de dados):
    database.js

12. Cria pasta database dentro de src:
  12.1 Dentro da pasta database, crio a pasta migrations e seeds.

14. Dentro da pasta src, crio a pasta app
  A pasta app conterá a maioria do código que envolve regra de negócio da aplicação.
 14.1 Dentro da pasta app, crio a pasta controllers e models.

  Resumo da estrutura do projeto:
  src/
    app.js
    routes.js
    server.js
    app/
      controllers
      models
    config/
      database.js
    database/
      migrations/
      seeds/

15. Instalo o sequelize
  yarn add sequelize

16. Instalo o sequelize-cli como dependencia de desenvolvimento:
  yarn add sequelize-cli -D

17. Crio o arquivo .sequelizerc (exporta o caminho e pastas criados anteriormente)
  O 'resolve' importado serve para padronizar o path (tanto em OSX, Windows, Linux)
  O arquivo fica da seguinte forma:

    const { resolve } = require('path');
    module.exports = {
      config: resolve(__dirname, 'src', 'config', 'database.js'),
      'models-path': resolve(__dirname, 'src', 'app', 'models'),
      'migrations-path': resolve(__dirname, 'src', 'database', 'migrations'),
      'seeds-path': resolve(__dirname, 'src', 'database', 'seeds'),
    };

16. Instalamos as dependencias para usar o PostgreSQL (pode ser necessário uma versão especifica):
  yarn add pg pg-hstore

17. Editamos arquivo src/config/database.js:

  require('dotenv/config');

  module.exports = {
    dialect: process.env.DB_DIALECT,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    username: process.env.DB_USER,
    password: process.env.DB_PASS,
      define: {
        timestamps: true, //serve pra colocar as timestamps: createdAt e updatedAt
        underscored: true, // Serve para o sequelize criar os models(tabelas) com padrão snake case
        underscoredAll: true, // Serve para o sequelize criar as colunas e relacionamentos com padrão snake case
      },
    };

  *-* Assim finalizou a configuração do sequelize ;) *-*

-------------------------------------
  FEATURE: Create sensor node

- Criar Migration de nó sensor
  
  18. Vamos criar a nossa primeira migration
que criará a tabela de nós sensores:
  yarn sequelize migration:create --name=create-sensor-nodes

  18.1 Após finalizar a migration, podemos executá-la:
    yarn sequelize db:migrate
  Como resultado teremos a tabela 'sensor_nodes' criada na base de dados.
    PS: Para desfazer uma migration:
      yarn sequelize db:migrate:undo (desfaz a ultima migration)
        ou
      db:migrate:undo:all (desfaz todas migrations)

- Criar model de nó sensor_nodes

19. O model vai ser utilizado para manipular os dados dos nós sensores (um CRUD):
  19.1 Criar arquivo SensorNode.js na pasta models;

- Criar loader de models
  20. Criar o loader index.js na pasta database.

  20.1 Importamos o loader no app.js
  Podemos testá-lo na rota


  -------------------------------------